{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang16393{\fonttbl{\f0\fnil Courier New;}{\f1\fnil\fcharset1 Cambria Math;}{\f2\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue128;\red0\green0\blue0;\red128\green128\blue128;\red255\green255\blue255;}
{\*\generator Riched20 10.0.14393}{\*\mmathPr\mmathFont1\mwrapIndent1440 }\viewkind4\uc1 
\pard\box\brdrdash\brdrw0 \cbpat4\sa200\sl276\slmult1\cf1\b\f0\fs18\lang9 package \cf2\b0 geeksforgeeks.amazon.school.FullProblems;\line\line\cf1\b import \cf2\b0 java.util.ArrayList;\line\cf1\b import \cf2\b0 java.util.Collections;\line\cf1\b import \cf2\b0 java.util.Comparator;\line\cf1\b import \cf2\b0 java.util.Scanner;\line\line\cf3\i /**\line  * Created by erdee on 18-01-2017.\line  */\line /*\line * Maths Amazon\line * Given coordinates of four points in a plane, find if the four points form a square or not.\line\line Input:\line The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. The first line of each test case contains 4 space separated integer points a , b , c , d\line\line Output:\line For each test case print 1 if the four points form a square else print 0.\line Remember to output the answer of each test case in a new line.\line\line Constraints:\line 1<=T<=100\line 1<=a,b,c,d<=100\line\line Example:\line\line Input:\line 2\line 20 20 20 10 10 20 10 10\line 10 10 10 10 20 10 20 30\line\line Output:\line 1\line 0*/\line /*\line * To check for square, we need to check for following.\line a) All fours sides formed by points are same.\line b) The angle between any two sides is 90 degree. (This condition is required as Quadrilateral also has same sides. */\line //----------------------------------------------------------------\line /*\line * The idea is to pick any point and calculate its distance from rest of the points. Let the picked picked point be \lquote p\rquote . To form a square, distance of two points must be same from \lquote p\rquote , let this distance be d. The distance from one point must be different from that d and must be equal to \f1\u8730?\f0\lang9 2 times d. Let this point with different distance be \lquote q\rquote .\line The above condition is not good enough as the the point with different distance can be on the other side. We also need to check that q is at same distance from 2 other points and this distance is same as d.*/\line\line /*\line * // A C++ program to check if four given points form a square or not.\line #include<iostream>\line using namespace std;\line\line // Structure of a point in 2D space\line struct Point\line\{\line     int x, y;\line\};\line\line // A utility function to find square of distance\line // from point 'p' to poitn 'q'\line int distSq(Point p, Point q)\line\{\line     return (p.x - q.x)*(p.x - q.x) +\line            (p.y - q.y)*(p.y - q.y);\line\}\line\line // This function returns true if (p1, p2, p3, p4) form a\line // square, otherwise false\line bool isSquare(Point p1, Point p2, Point p3, Point p4)\line\{\line     int d2 = distSq(p1, p2);  // from p1 to p2\line     int d3 = distSq(p1, p3);  // from p1 to p3\line     int d4 = distSq(p1, p4);  // from p1 to p4\line\line     // If lengths if (p1, p2) and (p1, p3) are same, then\line     // following conditions must met to form a square.\line     // 1) Square of length of (p1, p4) is same as twice\line     //    the square of (p1, p2)\line     // 2) p4 is at same distance from p2 and p3\line     if (d2 == d3 && 2*d2 == d4)\line     \{\line         int d = distSq(p2, p4);\line         return (d == distSq(p3, p4) && d == d2);\line     \}\line\line     // The below two cases are similar to above case\line     if (d3 == d4 && 2*d3 == d2)\line     \{\line         int d = distSq(p2, p3);\line         return (d == distSq(p2, p4) && d == d3);\line     \}\line     if (d2 == d4 && 2*d2 == d3)\line     \{\line         int d = distSq(p2, p3);\line         return (d == distSq(p3, p4) && d == d2);\line     \}\line\line     return false;\line\}\line\line // Driver program to test above function\line int main()\line\{\line     Point p1 = \{20, 10\}, p2 = \{10, 20\},\line           p3 = \{20, 20\}, p4 = \{10, 10\};\line     isSquare(p1, p2, p3, p4)? cout << "Yes": cout << "No";\line     return 0;\line\}\line * */\line\cf1\b\i0 public class \cf2\b0 CheckIfGivenFourPointsFormASquare \{\line\line     \cf3\i /* SOLUTION 1\line Correct\line Execution Time:0.447*/\line     /*\line public static void main (String[] args) \{\line         //code\line         int[] a = new int[8];\line         int flag1;\line         int flag2;\line         int flag3;\line         Scanner sc = new Scanner(System.in);\line         int n = sc.nextInt();\line         for(int i=0;i<n;i++)\{flag2 =0;flag1 =0;flag3=0;\line             for(int j=0;j<8;j++)\{\line                 a[j] = sc.nextInt();\line             \}\line             for(int j=0;j<8;j+=2)\{\line                 if(a[j]!=a[j+1])\{\line                     for(int k=0;k<8;k+=2)\{\line                         if(a[k]==a[k+1] && (a[k] == a[j] || a[k] == a[j+1]))\{\line                             flag1++;\line                         \}\line                     \}\line                     for(int k=0;k<8;k+=2)\{\line                         if(a[k]==a[j+1] && a[k+1]==a[j])\{\line                             flag2++;\line                         \}\line                     \}\line                     flag3=1;\line                     if(flag1 == 2 && flag2 ==1)\{System.out.println(1);\}\line                     else System.out.println(0);\line                     break;\line                 \}\line             \}\line             if(flag1 == 0 && flag2 ==0 &&flag3==0)\{System.out.println(0);\}\line         \}\line     \}\line */\line         // ----------------------------------------------------------------------------------\line     /* SOLUTION 2\line     * 0.71 eXECUTION TIME\line     * /\line  /*   public static void main (String[] args) \{\line         Scanner sc = new Scanner(System.in);\line         //code\line         int t =sc.nextInt();\line         Point[] p = new Point[4];\line         for(int i=0;i<t;i++)\{\line             for(int j=0;j<4;j++)\{\line                 int x = sc.nextInt();\line                 int y = sc.nextInt();\line                 p[j] = new Point(x,y);\line             \}\line             checkIfSquareOrNot(p);\line         \}\line     \}\line     private static class Point\{\line         int x;\line         int y;\line         public Point(int x, int y)\{\line             this.x=x;\line             this.y=y;\line         \}\line     \}\line\line     public static void checkIfSquareOrNot(Point[] p)\{\line         double[] dist = new double[3];\line         boolean flag=false;\line         Point p1 = p[0];\line         for(int i = 1;i<4;i++)\{\line             int result = (int)Math.pow(p1.x-p[i].x,2) + (int) Math.pow(p1.y-p[i].y,2);\line             dist[i-1] = Math.sqrt(result);\line         \}\line\line         if(dist[0]==dist[1])\{\line             int third = (int) Math.pow(dist[0],2) + (int) Math.pow(dist[1],2);\line             if(Math.sqrt(third)==dist[2])\{\line                 flag=true;\line             \}\line         \}\line         if(dist[1]==dist[2])\{\line             if(flag==false)\{\line                 int third = (int) Math.pow(dist[1],2) + (int) Math.pow(dist[2],2);\line                 if(Math.sqrt(third)==dist[0])\{\line                     flag=true;\line                 \}\line             \}\line         \}\line         if(dist[0]==dist[2])\{\line             if(flag==false)\{\line                 int third = (int) Math.pow(dist[0],2) + (int) Math.pow(dist[2],2);\line                 if(Math.sqrt(third)==dist[1])\{\line                     flag=true;\line                 \}\line             \}\line         \}\line         if(flag)\{\line             System.out.println("1");\line         \}else\{\line             System.out.println("0");\line         \}\line     \}*/\line     //---------------------------------------------------------------------------------------------------------\line     /*\line     * SOLUTION 3\line     * Correct\line Execution Time:0.971\line     * */\line /*\line\line     public static void main (String[] args) \{\line         Scanner in = new Scanner(System.in);\line         int numTestCases = Integer.parseInt(in.nextLine());\line\line         for(int i=0; i<numTestCases;i++) \{\line             String testCase = in.nextLine();\line             System.out.println(isSquare(parseTestCase(testCase)));\line         \}\line     \}\line\line     private static ArrayList<Point> parseTestCase(String testCase) \{\line\line         ArrayList<Point> points = new ArrayList<>();\line         String [] testString = testCase.split(" ");\line\line         for(int i=0; i<testString.length-1;i+=2) \{\line             int x = Integer.parseInt(testString[i]);\line             int y = Integer.parseInt(testString[i+1]);\line             points.add(new Point(x,y));\line         \}\line\line         return points;\line     \}\line\line     private static int isSquare(ArrayList<Point> points) \{\line\line         Collections.sort(points, new Comparator<Point>() \{\line             public int compare(Point a, Point b) \{\line                 return (a.x-b.x)+(a.y-b.y);\line             \}\line         \});\line\line         Point a = points.get(0);\line         Point b = points.get(1);\line         Point c = points.get(2);\line         Point d = points.get(3);\line\line\line         int disAB = a.distTo(b);\line         int disAC = a.distTo(c);\line         int disAD = a.distTo(d);\line\line\line         //First Angle ABC\line         Point ab = new Point(b.x-a.x,b.y-a.y);\line         Point ac = new Point(a.x-c.x,a.y-c.y);\line\line         double angleAB = Math.atan2(ab.y, ab.x);\line         double angleAC = Math.atan2(ac.y, ac.x);\line         double angleRes = angleAB - angleAC;\line         double angleABC = (angleRes * 180) / Math.PI;\line\line         //Second Angle DCB\line         Point dc = new Point(d.x-c.x,d.y-c.y);\line         Point db = new Point(d.x-b.x,d.y-b.y);\line\line         double angleDC = Math.atan2(dc.y, dc.x);\line         double angleDB = Math.atan2(db.y, db.x);\line         double angleResDCB = angleDC - angleDB;\line         double angleDCB = (angleResDCB * 180) / Math.PI;\line\line\line         if(Double.compare(Math.abs(angleABC),90.0) != 0  || Double.compare(Math.abs(angleDCB),90.0) != 0)\line             return 0;\line         else if(disAB == disAC && 2*disAB == disAD)\line             return 1;\line\line         return 0;\line     \}\line\line\line     private static class Point \{\line         int x;\line         int y;\line         public Point(int x, int y) \{\line             this.x = x;\line             this.y = y;\line         \}\line\line         public int distTo(Point a) \{\line             int x2 = a.x;\line             int y2 = a.y;\line             int dx = (x2-this.x)*(x2-this.x);\line             int dy = (y2-this.y)*(y2-this.y);\line             return dx+dy;\line         \}\line\line         public String toString() \{\line             return "("+x+","+y+")";\line         \}\line     \}\line */\line     //---------------------------------------------------------------------------------------------------------\line     /*\line     * SOLUTION 4\line     * Correct\line Execution Time:0.434\line     * */\line     /*public static void main (String[] args) \{\line\line\line         Scanner obj=new Scanner(System.in);\line         int t=obj.nextInt();\line\line         while(t>=1)\line         \{\line\line             int x[]=new int[4];\line             int y[]=new int[4];\line\line\tab\tab *//*\line\tab\tab for(int i=0;i<4;i++)\line\tab\tab\{\line\tab\tab\tab x[i]=obj.nextInt();\line\tab\tab\tab y[i]=obj.nextInt();\line\tab\tab\}\line\line\tab\tab double d1=Math.sqrt(((x[2]-x[0])*(x[2]-x[0]))+((y[2]-y[0])*(y[2]-y[0])));\line\tab\tab double d2=Math.sqrt(((x[1]-x[3])*(x[1]-x[3]))+((y[1]-y[3])*(y[1]-y[3])));\line\line\tab\tab if(d1==d2)\line\tab\tab\tab System.out.println(1);\line\line\tab\tab else\line\tab\tab\tab System.out.println(0);\line\line\tab\tab\tab *//*\line\line             //second method\line\line             for(int i=0;i<4;i++)\line             \{\line                 x[i]=obj.nextInt();\line                 y[i]=obj.nextInt();\line             \}\line\line             double a=getdistance(x[0],y[0],x[1],y[1]);\line             double b=getdistance(x[0],y[0],x[2],y[2]);\line             double c=getdistance(x[0],y[0],x[3],y[3]);\line\line\line             if(b==a*2&&a==c)\line             \{\line                 if(getdistance(x[2],y[2],x[1],y[1])==getdistance(x[2],y[2],x[3],y[3]))\line                     System.out.println(1);\line                 else\line                     System.out.println(0);\line             \}\line\line             else if(a==b*2&&b==c)\line\line             \{\line\line\line                 if(getdistance(x[1],y[1],x[2],y[2])==getdistance(x[1],y[1],x[2],y[2]))\line                     System.out.println(1);\line                 else\line                     System.out.println(0);\line\line\line             \}\line\line             else if(c==a*2&&b==a)\line             \{\line                 if(getdistance(x[3],y[3],x[1],y[1])==getdistance(x[2],y[2],x[3],y[3]))\line                     System.out.println(1);\line                 else\line                     System.out.println(0);\line\line\line             \}\line\line             else\line                 System.out.println(0);\line\line             t--;\line         \}\line\line\line\line     \}\line\line     static double getdistance(int x1,int y1,int x2,int y2)\line     \{\line         double x=Math.abs(x1-x2);\line         x*=x;\line\line         double y=Math.abs(y2-y1);\line         y*=y;\line\line         return (x+y);\line\line\line\line     \}\line */\line //---------------------------------------------------------------------------------------------------------\line     /*\line     * SOLUTION 5\line     * Correct\line Execution Time:0.463\line     * */\line\line\line //---------------------------------------------------------------------------------------------------------\line\line\cf2\i0\}\line\line\par

\pard\sa200\sl276\slmult1\cf0\f2\fs22\par
}
 