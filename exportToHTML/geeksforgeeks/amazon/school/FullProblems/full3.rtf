{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang16393{\fonttbl{\f0\fnil Courier New;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue128;\red0\green0\blue0;\red128\green128\blue128;\red255\green255\blue255;}
{\*\generator Riched20 10.0.14393}\viewkind4\uc1 
\pard\box\brdrdash\brdrw0 \cbpat4\sa200\sl276\slmult1\cf1\b\f0\fs18\lang9 package \cf2\b0 geeksforgeeks.amazon.school.FullProblems;\line\line\cf1\b import \cf2\b0 java.util.Scanner;\line\line\cf3\i /**\line  * Created by erdee on 31-01-2017.\line  */\line\line /*\line *\line * Geometic , Maths\line  Microsoft , Goldman Sachs , Expedia, Amazon, OATS Systems\line * */\line\line /*\line *Given two rectangles, find if the given two rectangles overlap or not. A rectangle is denoted by providing the x and y co-ordinates of two points: the left top corner and the right bottom corner of the rectangle.\line\line Note that two rectangles sharing a side are considered overlapping.\line\line Input:\line\line The first integer T denotes the number of test cases. For every test case, there are 2 lines of input. The first line consists of 4 integers: denoting the co-ordinates of the 2 points of the first rectangle. The first integer denotes the x co-ordinate and the second integer denotes the y co-ordinate of the left topmost corner of the first rectangle. The next two integers are the x and y co-ordinates of right bottom corner. Similarly, the second line denotes the cordinates of the two points of the second rectangle.\line\line Output:\line\line For each test case, output (either 1 or 0) denoting whether the 2 rectangles are overlapping. 1 denotes the rectangles overlap whereas 0 denotes the rectangles do not overlap.\line\line Constraints:\line 1 <= T <= 10\line -10000 <= x,y <= 10000\line\line T denotes the number of test cases. x denotes the x co-ordinate and y denotes the y co-ordinate.\line\line Example:\line\line Input:\line\line 2\line 0 10 10 0\line 5 5 15 0\line 0 2 1 1\line -2 -3 0 2\line\line Output:\line\line 1\line 0\line  *  */\line /*\line * Given two rectangles, find if the given two rectangles overlap or not.\line\line Note that a rectangle can be represented by two coordinates, top left and bottom right. So mainly we are given following four coordinates.\line l1: Top Left coordinate of first rectangle.\line r1: Bottom Right coordinate of first rectangle.\line l2: Top Left coordinate of second rectangle.\line r2: Bottom Right coordinate of second rectangle.\line\line rectanglesOverlap\line\line We need to write a function bool doOverlap(l1, r1, l2, r2) that returns true if the two given rectangles overlap.\line\line One solution is to one by one pick all points of one rectangle and see if the point lies inside the other rectangle or not. This can be done using the algorithm discussed here.\line Following is a simpler approach. Two rectangles do not overlap if one of the following conditions is true.\line 1) One rectangle is above top edge of other rectangle.\line 2) One rectangle is on left side of left edge of other rectangle.*/\line /*\line *\line * #include<bits/stdc++.h>\line\line struct Point\line\{\line     int x, y;\line\};\line\line // Returns true if two rectangles (l1, r1) and (l2, r2) overlap\line bool doOverlap(Point l1, Point r1, Point l2, Point r2)\line\{\line     // If one rectangle is on left side of other\line     if (l1.x > r2.x || l2.x > r1.x)\line         return false;\line\line     // If one rectangle is above other\line     if (l1.y < r2.y || l2.y < r1.y)\line         return false;\line\line     return true;\line\}\line\line /* Driver program to test above function */\line /*int main()\line         \{\line         Point l1 = \{0, 10\}, r1 = \{10, 0\};\line         Point l2 = \{5, 5\}, r2 = \{15, 0\};\line         if (doOverlap(l1, r1, l2, r2))\line         printf("Rectangles Overlap");\line         else\line         printf("Rectangles Don't Overlap");\line         return 0;\line         \}\line * */\line\line\cf1\b\i0 public class \cf2\b0 OverLappingRectangles \{\line    \cf3\i /* SOLUTION 1\line Correct\line Execution Time:0.434*/\line /*   public static void main(String args[]) \{\line        Scanner sc = new Scanner(System.in);\line        int T = sc.nextInt();\line\line        for(int i=0;i<T;i++)\{\line            int x1=sc.nextInt();\line            int y1=sc.nextInt();\line            int x2=sc.nextInt();\line            int y2=sc.nextInt();\line            int x3=sc.nextInt();\line            int y3=sc.nextInt();\line            int x4=sc.nextInt();\line            int y4=sc.nextInt();\line            if(((y1-y3)>=(y1-y2))||(y3-y1)>=(y3-y4)||(x1-x2)>=(x4-x3)||(x3-x1)>=(x2-x1))\{\line                System.out.println("0");\line\line            \}\line            else\{\line                System.out.println("1");\line            \}\line        \}\line\line    \}\line    */\line //---------------------------------------------------------------------------------------\line  /* SOLUTION 2\line Correct\line Execution Time:0.959*/\line    /*public static void main (String[] args) \{\line        int T,N;\line        Point l1,l2,r1,r2;\line\line        Scanner sc=new Scanner(System.in);\line        T=sc.nextInt();\line\line        for(int i=0;i<T;i++)\{\line            l1=new Point();\line            l2=new Point();\line            r1=new Point();\line            r2=new Point();\line\line            l1.x=sc.nextInt();\line            l1.y=sc.nextInt();\line            r1.x=sc.nextInt();\line            r1.y=sc.nextInt();\line\line            l2.x=sc.nextInt();\line            l2.y=sc.nextInt();\line            r2.x=sc.nextInt();\line            r2.y=sc.nextInt();\line\line            System.out.println(isOverlapping(l1,r1,l2,r2)?"1":"0");\line        \}\line    \}\line\line     public static boolean isOverlapping(Point l1,Point r1,Point l2,Point r2)\{\line         if(r1.x<=l2.x || l1.x>=r2.x)\line             return false;\line\line         if(r1.y>=l2.y || l1.y<=r2.y)\line             return false;\line\line         return true;\line     \}\line\line     static class Point\{\line         int x;\line         int y;\line     \}*/\line\line //---------------------------------------------------------------------------------------\line  /* SOLUTION 3\line Correct\line Execution Time:0.692*/\line /*\line static class Node \{\line     int x;\line     int y;\line     Node() \{\line         x = 0;\line         y = 0;\line     \}\line     Node(int x, int y) \{\line         this.x = x;\line         this.y = y;\line     \}\line\}\line     public static void main (String[] args) \{\line         Scanner scanner = new Scanner(System.in);\line         int size = scanner.nextInt();\line         for (int i = 0; i < size; i++) \{\line             Node oneLeftTop = new Node(scanner.nextInt(), scanner.nextInt());\line             Node oneRightBottom = new Node(scanner.nextInt(), scanner.nextInt());\line             Node twoLeftTop = new Node(scanner.nextInt(), scanner.nextInt());\line             Node twoRightBottom = new Node(scanner.nextInt(), scanner.nextInt());\line             System.out.println("" + isOverlap(oneLeftTop, oneRightBottom, twoLeftTop, twoRightBottom));\line         \}\line     \}\line\line     public static int isOverlap(Node oneLeftTop, Node oneRightBottom, Node twoLeftTop, Node twoRightBottom) \{\line         int oneTop = oneLeftTop.y;\line         int oneLeft = oneLeftTop.x;\line         int oneRight = oneRightBottom.x;\line         int oneBottom = oneRightBottom.y;\line         int twoTop = twoLeftTop.y;\line         int twoLeft = twoLeftTop.x;\line         int twoRight = twoRightBottom.x;\line         int twoBottom = twoRightBottom.y;\line         if (oneTop <= twoBottom || twoTop <= oneBottom ||\line                 oneLeft >= twoRight || oneRight <= twoLeft) \{\line             return 0;\line         \}\line         return 1;\line     \}\line */\line\line //---------------------------------------------------------------------------------------\line  /* SOLUTION 4\line Correct\line Execution Time:0.418*/\line /*\line\line     private static int numberOfTestCases, xandyCoordinatesOfLeftTopAndRightBottomOfRectangleOne[], xandyCoordinatesOfLeftTopAndRightBottomOfRectangleTwo[];\line     private\tab static int booleanAreRectanglesOverlapping;\line\line     private int getIfRectanglesOverlap(int[] xandyCoordinateOfFirst, int[] xandyCoordinateOfSecond)\line     \{\line         int isOverlapping = 1;\line\line         if(xandyCoordinateOfFirst[0] >= xandyCoordinateOfSecond[2] || xandyCoordinateOfSecond[0] >= xandyCoordinateOfFirst[2] || xandyCoordinateOfFirst[3] >= xandyCoordinateOfSecond[1] || xandyCoordinateOfSecond[3] >= xandyCoordinateOfFirst[1])\line         \{\line             isOverlapping = 0;\line         \}\line         return isOverlapping;\line     \}\line\line     public static void main(String args[])\line     \{\line         OverLappingRectangles gfg = new OverLappingRectangles();\line         Scanner sc = new Scanner(System.in);\line         //System.out.println("Enter the number of test cases");\line         numberOfTestCases = sc.nextInt();\line\line         for(int i = 0; i < numberOfTestCases; i++)\line         \{\line             // System.out.println("Enter the x and y coordinates of left top and rightbottom for the first rectangle");\line\line             xandyCoordinatesOfLeftTopAndRightBottomOfRectangleOne = new int[4];\line             for(int j = 0; j < 4; j++)\line             \{\line                 xandyCoordinatesOfLeftTopAndRightBottomOfRectangleOne[j] = sc.nextInt();\line             \}\line\line             // System.out.println("Enter the x and y coordinates of left top and rightbottom for the second rectangle");\line\line             xandyCoordinatesOfLeftTopAndRightBottomOfRectangleTwo = new int[4];\line             for(int j = 0; j < 4; j++)\line             \{\line                 xandyCoordinatesOfLeftTopAndRightBottomOfRectangleTwo[j] = sc.nextInt();\line             \}\line\line             booleanAreRectanglesOverlapping = gfg.getIfRectanglesOverlap(xandyCoordinatesOfLeftTopAndRightBottomOfRectangleOne, xandyCoordinatesOfLeftTopAndRightBottomOfRectangleTwo);\line             System.out.println(booleanAreRectanglesOverlapping);\line         \}\line     \}\line */\line //---------------------------------------------------------------------------------------\line  /* SOLUTION 5\line Correct\line Execution Time:0.433*/\line /*\line     public static void main(String[] args) \{\line         Scanner sc = new Scanner(System.in);\line         int q = sc.nextInt();\line         for (int i = 0; i < q; i++) \{\line\line             int ax = sc.nextInt();\line             int ay = sc.nextInt();\line             int bx = sc.nextInt();\line             int by = sc.nextInt();\line             int cx = sc.nextInt();\line             int cy = sc.nextInt();\line             int dx = sc.nextInt();\line             int dy = sc.nextInt();\line             //one rectangle to the left of other\line             if ((ax >= dx) || (bx <= cx)) System.out.println(0);\line                 //one rectangle to the top of other\line             else if ((ay <= dy) || (by >= cy)) System.out.println(0);\line             else System.out.println(1);\line         \}\line\line     \}*/\line\line\cf2\i0\}\par

\pard\sa200\sl276\slmult1\cf0\f1\fs22\par
}
 